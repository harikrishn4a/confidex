{"_id":"glob-to-regex.js","name":"glob-to-regex.js","dist-tags":{"latest":"1.0.1"},"versions":{"1.0.1":{"name":"glob-to-regex.js","packageManager":"yarn@4.9.3","publishConfig":{"access":"public"},"version":"1.0.1","description":"Transform GLOB patterns to JavaScript regular expressions for fast file path matching.","author":{"name":"streamich","url":"https://github.com/streamich"},"homepage":"https://github.com/streamich/glob-to-regex","repository":{"type":"git","url":"git+https://github.com/streamich/glob-to-regex.git"},"funding":{"type":"github","url":"https://github.com/sponsors/streamich"},"keywords":["glob","regex","regexp","pattern","matcher","path","filesystem","wildcard"],"engines":{"node":">=10.0"},"main":"lib/index.js","types":"lib/index.d.ts","typings":"lib/index.d.ts","license":"Apache-2.0","scripts":{"format":"biome format ./src","format:fix":"biome format --write ./src","lint":"biome lint ./src","lint:fix":"biome lint --apply ./src","clean":"npx rimraf@6.0.1 lib typedocs coverage gh-pages yarn-error.log","build":"tsc --project tsconfig.build.json --module commonjs --target es2020 --outDir lib","test":"vitest ./src","coverage":"vitest run --coverage","typedoc":"npx typedoc@0.25.13 --tsconfig tsconfig.build.json","build:pages":"npx rimraf@6.0.1 gh-pages && mkdir -p gh-pages && cp -r typedocs/* gh-pages && cp -r coverage gh-pages/coverage","deploy:pages":"gh-pages -d gh-pages","publish-coverage-and-typedocs":"yarn typedoc && yarn coverage && yarn build:pages && yarn deploy:pages"},"peerDependencies":{"tslib":"2"},"devDependencies":{"@biomejs/biome":"^2.1.2","@vitest/coverage-v8":"^3.2.4","config-galore":"^1.0.0","tslib":"^2.8.1","typescript":"^5.8.3","vitest":"^3.2.4"},"_id":"glob-to-regex.js@1.0.1","gitHead":"d1522da4c68c3818a20bd9dde3eaf07c88285b3e","bugs":{"url":"https://github.com/streamich/glob-to-regex/issues"},"_nodeVersion":"24.6.0","_npmVersion":"11.5.1","dist":{"integrity":"sha512-CG/iEvgQqfzoVsMUbxSJcwbG2JwyZ3naEqPkeltwl0BSS8Bp83k3xlGms+0QdWFUAwV+uvo80wNswKF6FWEkKg==","shasum":"f71cc9cb8441471a9318626160bc8a35e1306b21","tarball":"https://registry.npmjs.org/glob-to-regex.js/-/glob-to-regex.js-1.0.1.tgz","fileCount":4,"unpackedSize":11378,"signatures":[{"keyid":"SHA256:DhQ8wR5APBvFHLF/+Tc+AYvPOdTpcIDqOhxsBHRwC7U","sig":"MEQCIGh/D2XcALiLWI9oW6ClNB3xKei8GdsY2wF+TE95pW7nAiBYo6i2f68pV7daQYSVCUTlTxBUw5tMl2/2hPkaOfWl7g=="}]},"_npmUser":{"name":"streamich","email":"vadimsdaleckis@gmail.com"},"directories":{},"maintainers":[{"name":"streamich","email":"vadimsdaleckis@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages-npm-production","tmp":"tmp/glob-to-regex.js_1.0.1_1756033666286_0.386317580852928"},"_hasShrinkwrap":false}},"time":{"created":"2025-08-24T11:07:46.134Z","1.0.1":"2025-08-24T11:07:46.470Z","modified":"2025-08-24T11:07:46.758Z"},"maintainers":[{"name":"streamich","email":"vadimsdaleckis@gmail.com"}],"description":"Transform GLOB patterns to JavaScript regular expressions for fast file path matching.","homepage":"https://github.com/streamich/glob-to-regex","keywords":["glob","regex","regexp","pattern","matcher","path","filesystem","wildcard"],"repository":{"type":"git","url":"git+https://github.com/streamich/glob-to-regex.git"},"author":{"name":"streamich","url":"https://github.com/streamich"},"bugs":{"url":"https://github.com/streamich/glob-to-regex/issues"},"license":"Apache-2.0","readme":"# glob-to-regex.js\n\nTransform GLOB patterns to JavaScript regular expressions for fast file path matching.\n\nThis tiny library converts familiar shell-style glob patterns like `**/*.ts` or `src/{a,b}/**/*.js` into JavaScript `RegExp` objects and provides a convenient matcher utility.\n\n## Install\n\n```bash\nyarn add glob-to-regex.js\n# or\nnpm i glob-to-regex.js\n```\n\n## Quick start\n\n```ts\nimport {toRegex, toMatcher} from 'glob-to-regex.js';\n\n// Build a RegExp from a glob\nconst re = toRegex('src/**/test.ts');\nre.test('src/a/b/test.ts'); // true\nre.test('src/test.ts');     // true\nre.test('src/test.tsx');    // false\n\n// Build a predicate function from a pattern or an array of patterns\nconst match = toMatcher(['**/*.ts', '!**/*.d.ts']); // negative patterns are not special; use a RegExp if needed\nmatch('index.ts');    // true\nmatch('types.d.ts');  // true (negation is not parsed specially)\n```\n\n## API\n\n- toRegex(pattern: string): RegExp\n\t- Converts a glob pattern to an anchored regular expression (`^...$`).\n\n- toMatcher(pattern: string | RegExp | Array<string | RegExp>): (path: string) => boolean\n\t- Accepts a glob string, a RegExp, or an array of them. If given an array, it returns true if any item matches (logical OR, short-circuited).\n\t- Strings starting with `/` and ending with `/flags?` are treated as regular expressions (e.g. `\"/\\\\.test\\\\.ts$/\"`).\n\n## Supported glob features\n\n- `/` separates path segments\n- `*` matches zero or more characters within a single segment (does not cross `/`)\n- `?` matches exactly one character within a single segment\n- `**` matches across path segments, including none\n- `{a,b,c}` alternation groups (no nesting). Each item inside can itself contain glob syntax\n- Character classes: `[abc]`, `[a-z]`, `[!a-z]`, `[!abc]`\n\nNotes:\n- The produced RegExp is anchored at start and end (`^...$`).\n- Character classes are copied through to the output regex. Use standard JavaScript class syntax.\n- Brace groups are not nestable. If an unmatched `{` is found, it is treated literally.\n\n## Examples\n\n```ts\ntoRegex('a/b/c.txt').test('a/b/c.txt'); // true\ntoRegex('a/*.txt').test('a/file.txt');  // true\ntoRegex('a/*.txt').test('a/x/y.txt');   // false\ntoRegex('file?.js').test('file1.js');   // true\ntoRegex('src/**/test.ts').test('src/a/b/test.ts'); // true\ntoRegex('assets/**').test('assets/a/b.png');       // true\ntoRegex('*.{html,txt}').test('page.html');         // true\ntoRegex('src/{a,b}/**/*.ts').test('src/b/x/y.ts'); // true\ntoRegex('file[0-9].txt').test('file5.txt');        // true\ntoRegex('file[!0-9].txt').test('filea.txt');       // true\ntoRegex('**/*.[jt]s{,x}').test('dir/a/b.jsx');     // true\n```\n\n## TypeScript\n\nTypes are bundled. The library targets modern Node.js and browsers.\n\n## Performance\n\n`toRegex` performs a single pass over the pattern and creates a native RegExp. Matching is then performed by V8's highly optimized engine.\n\n## Limitations\n\n- Brace groups are not nested.\n- Negated globs like `!**/*.d.ts` are not parsed specially. If you need exclusion, combine multiple matchers or filter results separately.\n\n## License\n\nApache-2.0 Â© streamich\n\n","readmeFilename":"README.md","_rev":"1-4a34f580161433e4b7e992f818ac0599"}